import random
# lets create a board object to represent the minesweeper game
#this is so that we can just say "create a new board onject", or
# "dig here", or "render this game for this object"
class Board:
    def __init__(self, dim_size, num_bombs):
#let's deep track of these parameters.the will be helpful later
        self.dim_size = dim_size
        self.num_bombs = num_bombs
# let's create the board
#use the helpful function
        self.board = self.make_new_board() #plant the bombs
        self.assign_values_to_board()

#initialize a set to keep track of which locations we've uncovered
#we will save (row,col) tuples into this set
        self.dug = set() #if we dig to 0,0 then self.dug = {(0,0)}
    def make_new_board(self):

    def assign_values_to_board(self):
        for r in range(self.dim_size):
            for c in range(self.dim_size):
                if self.board[r][c] == '*':
                    continue
                self.board[r][c] = self.get_num_neighboring_bombs(r, c)
    def get_num_neighboring_bombs(self, row, col):
#let's iterate through each of the neighboring positions and sum number of bombs
#top left : (row-1, col-1)
#top middle:(row-1, col)
#tip right:row-1, col+1)
#left:(row, col-1)
#tight:row, col+1)
#bottom left:(row+1, col-1)
#bottom middle:(row+1, col)
#bottom right:row+1, col+1)
#make sure to not go out of bounds
        num_neghboring_bombs = 0
        for r in range(max(0, row-1), min(self.dim_size-1, row+1)+1):
            for c in range(max(0, col-1), min(self.dim_size-1, col+1)+1):
                if r == row and c == col:
                   # our original location, do not check
                   continue
                if self.board[r][c] == '*':
                    num_neghboring_bombs += 1




#construct a new board based on the dim size and num bombs
#we should construct the list of lists is most natural
        board = [[None for _ in range(self.dim_size)] for _ in range(self.dim_size)]
# plant the bombs
        bombs_planted = 0
        while bombs_planted < self.num_bombs:
            loc = random.randint(0, self.dim_size**2 - 1)# resturn a random integer
            row = loc // self.dim_size#we want the number of times dim_size goes into loc
            col = loc % self.dim_size# we want it to tell us what index is there
            if board[row][col] == '*':
#means that the bomb has been planted so keep going
               continue
            board[row][col] = '*' #plant the bomb
            bombs_planted += 1

        return board

# play the game
def play(dim_size=10, num_bombs=10):
# Step 1: create the board and plant the bombs
# Step 2: show the user the board and ask for where they want to dig
# step 3: if location is a bomb, show game over message
# step 3b: if location is not a bomb, dig recursively until each square is at least next to a bomb
# step 4: repeat steps 2 and 3/3b until there are no more places to dig > vctiory
    pass
